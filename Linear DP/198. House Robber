//Optimal solution
//Time Complexity: O(n)
//space COmplexity: O(1)

class Solution {
    public int rec(int i, int[] nums, int[] dp){
        if(i >= nums.length){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int pick = 0, npick = 0;
        pick = rec(i + 2, nums, dp) + nums[i];
        npick = rec(i + 1, nums, dp);
        return dp[i] = Math.max(pick, npick);
    }
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        int[] dp = new int[2];
        //Arrays.fill(dp, -1);
        //return Math.max(rec(0, nums, dp), rec(1, nums, dp));
        dp[0] = nums[0];
        dp[1] = Math.max(nums[1], nums[0]);
        for(int i = 2; i < n; i++){
            int pick = dp[(i - 2) % 2] + nums[i];
            int npick = dp[(i - 1) % 2];
            dp[i % 2] = Math.max(pick, npick);
        }

        return dp[(n - 1) % 2];//Math.max(dp[n - 1], dp[n - 2]);
    }
}


