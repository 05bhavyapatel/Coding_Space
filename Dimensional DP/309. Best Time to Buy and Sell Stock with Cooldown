//Time c:O(n)
//space c: O(n)

class Solution {
    public int rec(int[] prices, int i, int flag, int[][] dp){
        if(i >= prices.length){
            return 0;
        }
        if(dp[i][flag] != -1){
            return dp[i][flag];
        }
        int buy = 0;
        int sell = 0;
        if(flag == 0){
            buy = Math.max(-prices[i] + rec(prices, i + 1, 1, dp), rec(prices, i + 1, 0, dp));
        }else{
            sell = Math.max(prices[i] + rec(prices, i + 2, 0, dp), rec(prices, i + 1, 1, dp));
        }

        return dp[i][flag] = Math.max(buy, sell);
    }
    public int maxProfit(int[] prices) {
    int n = prices.length;
    if (n == 0) return 0;

    int[][] dp = new int[n][2];
    dp[0][0] = -prices[0]; 
    dp[0][1] = 0;     

    for (int i = 1; i < n; i++) {
        dp[i][0] = Math.max(dp[i - 1][0], (i >= 2 ? dp[i - 2][1] : 0) - prices[i]);

        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
    }

    return dp[n - 1][1];
}


}
