//Time Complexity: O(n * amount)
//Space Complexity: O(n * amount)

class Solution {
    public int rec(int amount, int[] coins, int i, int[][] dp){
        if(i >= coins.length){
            return 0;
        }
        if(dp[i][amount] != -1){
            return dp[i][amount];
        }
        if(amount == 0){
            return 1;
        }

        int pick = 0;
        if(amount >= coins[i]){
            pick = rec(amount - coins[i], coins, i, dp);
        }
        int npick = rec(amount, coins, i + 1, dp);
        return dp[i][amount] = pick + npick;
    }
    public int change(int amount, int[] coins) {
    int n = coins.length;
    int[][] dp = new int[n][amount + 1];

    // Base case: if amount = 0 → 1 way (pick nothing)
    for (int i = 0; i < n; i++) {
        dp[i][0] = 1;
    }

    // Fill dp table from last coin → first coin
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 1; j <= amount; j++) {
            int pick = 0, npick = 0;

            if (j >= coins[i]) {
                pick = dp[i][j - coins[i]];   // use same coin
            }
            if (i + 1 < n) {
                npick = dp[i + 1][j];         // skip coin
            }

            dp[i][j] = pick + npick;
        }
    }

    return dp[0][amount]; 
    }
}
