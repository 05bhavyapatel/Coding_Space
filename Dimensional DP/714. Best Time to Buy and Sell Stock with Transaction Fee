//Time complexity: O(n)
//Space Complexity:O(n)
public int maxProfit(int[] prices, int fee) {
    int n = prices.length;
    int[][] dp = new int[n][2];

    dp[0][0] = 0;
    dp[0][1] = -prices[0];

    for (int i = 1; i < n; i++) {
        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);
        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
    }

    return dp[n - 1][0];
}
//Time C: O(n^2)
//space c: O(n^2) + stack space

class Solution {
    public int rec(int[] prices, int i, int flag, int fee, int[][] dp){
        if(i == prices.length){
            return 0;
        }
        if(dp[i][flag] != -1){
            return dp[i][flag];
        }
        int buy = 0;
        if(flag == 1){
            buy = Math.max(rec(prices, i + 1, flag, fee, dp), prices[i] - fee + rec(prices, i + 1, 0, fee, dp));
        }else{
            buy = Math.max(rec(prices, i + 1, flag, fee, dp), -prices[i] + rec(prices, i + 1, 1, fee, dp));
        }
        return dp[i][flag] = buy;
    }
    public int maxProfit(int[] prices, int fee) {
        int[][] dp = new int[prices.length][2];
        for(int[] i: dp){
            Arrays.fill(i, -1);
        }
        return rec(prices, 0, 0, fee, dp);
    }
}
